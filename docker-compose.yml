version: '2'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}
  static:
    ipam:
      config:
        - subnet: 172.28.0.0/23 # In order to specify static IPs, we must explicitly declare subnet.
          ip_range: 172.28.0.0/24 # Range for dynamic IPs. We'll make sure to assign static IPs outside this range.

volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  docker-in-docker:
    driver: ${VOLUMES_DRIVER}

services:
  dnsmasq:
    image: strm/dnsmasq
    volumes:
      - ./dnsmasq.conf:/etc/dnsmasq.conf
    ports:
      - 13553:53/udp
    cap_add:
      - NET_ADMIN
    networks:
      static:
        ipv4_address: 172.28.1.1 # Static IP here makes it possible to point other containers' dns here.

  ### Docker-in-Docker ################################################
  docker-in-docker:
    image: docker:19.03-dind
    environment:
      DOCKER_TLS_SAN: DNS:docker-in-docker
    privileged: true
    volumes:
      - ${HOST_MACHINE_CODE_PATH}:${CONTAINER_PATH}${CONTAINER_MOUNT_FLAG}
    expose:
      - 2375
    networks:
      - backend

  ### NGINX Server #########################################
  nginx:
    build:
      context: ./nginx
      args:
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${HOST_MACHINE_CODE_PATH}:${CONTAINER_PATH}${CONTAINER_MOUNT_FLAG}
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
      - "24679:24679"
    depends_on:
      - dnsmasq
      - node
    networks:
      static:
        ipv4_address: 172.28.1.2
      frontend: null
      backend: null

  ### MySQL ################################################
  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - backend

  ### node #########################################
  node:
    build:
      context: ./node
      args:
        - PUID=${NODE_PUID}
        - PGID=${NODE_PGID}
        - LOCALE=${NODE_LOCALE}
        - INSTALL_DOCKER_CLIENT=${NODE_INSTALL_DOCKER_CLIENT}
        - NODE_VERSION=${NODE_VERSION}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${HOST_MACHINE_CODE_PATH}:${CONTAINER_PATH}${CONTAINER_MOUNT_FLAG}
    expose:
      - "9560"
      - "4000"
    ports:
      - "24678:24678"
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    environment:
      - DOCKER_HOST=tcp://docker-in-docker:2376
    networks:
      backend: null
      frontend: null
      static:
        ipv4_address: 172.28.1.41
    links:
      - docker-in-docker
    dns:
      - 172.28.1.1

  ### Redis ################################################
  redis:
    build: ./redis
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend
